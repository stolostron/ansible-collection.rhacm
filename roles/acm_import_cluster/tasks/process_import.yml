---
# Init clusters_to_import var so in case no clusters found to be imported
# the flow just skip all tasks and not fail.
- name: Init clusters_to_import var
  ansible.builtin.set_fact:
    updated_clusters_to_import_list: []

- name: Locate kubeconfig file for clusters (when not explicitly defined)
  ansible.builtin.include_tasks:
    file: locate_kubeconfig_file.yml
  loop: "{{ clusters_to_import }}"
  when: item.kubeconfig is not defined

- name: Update clusters import list
  ansible.builtin.set_fact:
    clusters_to_import: "{{ [clusters_to_import, updated_clusters_to_import_list]
      | community.general.lists_mergeby('name', list_merge='replace') }}"

- name: Create KlusterletAddonConfig for cluster import
  community.okd.k8s:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    definition: "{{ lookup('template', 'klusterlet-addon-config.yaml.j2') | from_yaml }}"
    state: present
  loop: "{{ clusters_to_import }}"

- name: Handle clusters import secret
  ansible.builtin.include_tasks:
    file: handle_import_secret.yml
  loop: "{{ clusters_to_import }}"

- name: Wait for import cluster to join
  kubernetes.core.k8s_info:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    api_version: cluster.open-cluster-management.io/v1
    kind: ManagedCluster
    name: "{{ item.name }}"
    wait: true
    wait_timeout: 1200
    wait_condition:
      type: ManagedClusterJoined
      status: true
  loop: "{{ clusters_to_import }}"

- name: Wait for import cluster to become available
  kubernetes.core.k8s_info:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    api_version: cluster.open-cluster-management.io/v1
    kind: ManagedCluster
    name: "{{ item.name }}"
    wait: true
    wait_timeout: 1200
    wait_condition:
      type: ManagedClusterConditionAvailable
      status: true
  loop: "{{ clusters_to_import }}"

# Starting from ACM 2.8 a ManagedClusterImportSucceeded condition type
# has been added for the imported clusters.
# Check for available type and if exists, verify the successful import of the cluster.
- name: Gather clusters info to check for ManagedClusterImportSucceeded type
  kubernetes.core.k8s_info:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    api_version: cluster.open-cluster-management.io/v1
    kind: ManagedCluster
    name: "{{ item.name }}"
  loop: "{{ clusters_to_import }}"
  register: import_succeed_type

- name: Init clusters_with_import_state_type var
  ansible.builtin.set_fact:
    clusters_with_import_state_type: []

- name: Create clusters list to check ManagedClusterImportSucceeded type
  ansible.builtin.set_fact:
    clusters_with_import_state_type: "{{ clusters_with_import_state_type
      | default([]) + item.resources
      | selectattr('metadata', 'defined')
      | map(attribute='metadata')
      | selectattr('name', 'defined')
      | map(attribute='name') }}"
  loop: "{{ import_succeed_type.results }}"
  when: item.resources
    | selectattr('status', 'defined')
    | map(attribute='status')
    | selectattr('conditions', 'defined')
    | map(attribute='conditions')
    | first
    | selectattr('type', 'match', 'ManagedClusterImportSucceeded')

- name: Wait for cluster to succeeded import flow
  kubernetes.core.k8s_info:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    api_version: cluster.open-cluster-management.io/v1
    kind: ManagedCluster
    name: "{{ item }}"
    wait: true
    wait_timeout: 1200
    wait_condition:
      type: ManagedClusterImportSucceeded
      status: true
  loop: "{{ clusters_with_import_state_type }}"

- name: Add cluster kubeconfig file to the hub
  community.okd.k8s:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    definition: "{{ lookup('template', 'kubeconfig-secret.yaml.j2') | from_yaml }}"
    state: present
  loop: "{{ clusters_to_import }}"
  no_log: true

- name: Add cluster cloud credential secret to the hub (if defined)
  community.okd.k8s:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    definition: "{{ lookup('template', 'cloud-secret.yaml.j2') | from_yaml }}"
    state: present
  loop: "{{ clusters_to_import }}"
  when: item.cloud_creds is defined

---
- name: Generate cluster token for authentication
  ansible.builtin.include_role:
    name: cluster_login

- name: Check for already imported clusters
  kubernetes.core.k8s_info:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    api_version: cluster.open-cluster-management.io/v1
    kind: ManagedCluster
    name: "{{ item.name }}"
  loop: "{{ acm_import_clusters }}"
  register: managed_clusters_state

# Init clusters_to_import var so in case no clusters found to be imported
# the flow just skip all tasks and not fail.
- name: Init clusters_to_import var
  ansible.builtin.set_fact:
    clusters_to_import: []

- name: Create clusters list to be imported
  ansible.builtin.set_fact:
    clusters_to_import: "{{ clusters_to_import | default([]) + [item.item] }}"
  loop: "{{ managed_clusters_state.results }}"
  when:
    - state == "present"
    - item.resources | length == 0

- name: Create clusters list to be detached
  ansible.builtin.set_fact:
    clusters_to_import: "{{ clusters_to_import | default([]) + [item.item] }}"
  loop: "{{ managed_clusters_state.results }}"
  when:
    - state == "absent"
    - item.resources | length != 0

- name: Process ManagedCluster for cluster import
  community.okd.k8s:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    definition: "{{ lookup('template', 'managed-cluster.yaml.j2') | from_yaml }}"
    state: "{{ state }}"
  loop: "{{ clusters_to_import }}"

- name: Process import
  ansible.builtin.include_tasks:
    file: process_import.yml
  when: state == "present"

- name: Check for imported cluster to be detached
  kubernetes.core.k8s_info:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    api_version: cluster.open-cluster-management.io/v1
    kind: ManagedCluster
    name: "{{ item.name }}"
  loop: "{{ clusters_to_import }}"
  register: remove_clusters
  until: remove_clusters.resources | length == 0
  retries: 30
  delay: 20
  when: state == "absent"

- name: Print state message
  vars:
    import_state: "{%- if state == 'present' -%}
                   imported
                   {%- elif state == 'absent' -%}
                   detached
                   {%- endif -%}"
  ansible.builtin.debug: # noqa: jinja[spacing]
    msg: "The clusters have been {{ import_state }}"

- name: Validate required parameters
  ansible.builtin.fail:
    msg: "The 'pull_secret' and 'ssh_pub_key' variables are mandatory."
  when: item is none
  loop:
    - "{{ pull_secret }}"
    - "{{ ssh_pub_key }}"
  no_log: true

- name: Set ocp assets path
  ansible.builtin.set_fact:
    working_path: "{{ lookup('env', 'PWD') }}/{{ main_logs_dir }}/{{ clusters_dir }}"
    cl_details_file_path: "{{ lookup('env', 'PWD') }}/{{ main_logs_dir }}/{{ clusters_details_file }}"

- name: Prepare clusters list
  ansible.builtin.include_tasks:
    file: prepare_clusters_list.yml

- name: Prepare cloud credentials
  ansible.builtin.include_tasks:
    file: creds.yml
  loop: "{{ ocp_clusters_list }}"

- name: Prepare OCP cluster configuration
  ansible.builtin.include_tasks:
    file: prepare.yml
  loop: "{{ ocp_clusters_list }}"

- name: Select OpenShift version for deploy
  ansible.builtin.include_tasks:
    file: select_ocp_version.yml
  loop: "{{ ocp_clusters_list }}"

- name: Process OpenShift
  ansible.builtin.include_tasks:
    file: process.yml

- name: Remove remains after cluster deletions
  when: state == "absent"
  block:
    - name: Delete assets directory when cluster destroyed
      ansible.builtin.file:
        path: "{{ working_path }}/{{ item.name }}/"
        state: absent
      loop: "{{ ocp_clusters_list }}"

    - name: Remove clusters details from the state file
      ansible.builtin.blockinfile:
        path: "{{ cl_details_file_path }}"
        block: ""
        marker: "#{mark} {{ item.name }} details"
        state: absent
      loop: "{{ ocp_clusters_list }}"

    - name: Check the file "{{ clusters_details_file }}"
      ansible.builtin.stat:
        path: "{{ cl_details_file_path }}"
      register: cl_file_state

    - name: Delete the file if empty "{{ clusters_details_file }}"
      ansible.builtin.file:
        path: "{{ cl_details_file_path }}"
        state: absent
      when:
        - cl_file_state.stat.exists
        - cl_file_state.stat.size == 0

- name: Gather and print created/existing clusters
  when: state == "present"
  block:
    - name: Combine newly created and existing clusters list
      ansible.builtin.set_fact:
        ocp_clusters_list: "{{ ocp_clusters_list | default([]) + existing_ocp_clusters | default([]) }}"

    - name: Fetch OCP cluster details
      ansible.builtin.include_tasks:
        file: fetch_details.yml
      loop: "{{ ocp_clusters_list }}"

    - name: Print clusters details
      ansible.builtin.debug:
        msg: "{{ cl_state }}"

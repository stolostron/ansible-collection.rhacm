---
- name: Generate cluster token to authentication
  ansible.builtin.include_role:
    name: cluster_login

- name: Set info state
  ansible.builtin.set_fact: # noqa: jinja[spacing]
    info_state: "{%- if state == 'present' -%}
                 Create
                 {%- elif state == 'absent' -%}
                 Destroy
                 {%- endif -%}"

- name: Cluster global credentials - "{{ info_state }}"
  community.okd.k8s:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    definition: "{{ lookup('template', 'global-credentials.yaml.j2') | from_yaml }}"
    state: "{{ state }}"
  loop: "{{ acm_hive_clusters_credentials }}"
  no_log: true

- name: Managed Cluster - "{{ info_state }}"
  community.okd.k8s:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    definition: "{{ lookup('template', 'managed-cluster.yaml.j2') | from_yaml }}"
    state: "{{ state }}"
  loop: "{{ acm_hive_clusters }}"

- name: Prepare clusters secrets
  ansible.builtin.include_tasks:
    file: prepare_secrets.yml
  when: state == "present"

- name: Cluster MachinePool - "{{ info_state }}"
  community.okd.k8s:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    definition: "{{ lookup('template', 'machine-pool.yaml.j2') | from_yaml }}"
    state: "{{ state }}"
  loop: "{{ acm_hive_clusters }}"

- name: Cluster KlusterletAddonConfig - "{{ info_state }}"
  community.okd.k8s:
    host: "{{ cluster_api }}"
    api_key: "{{ cluster_api_token }}"
    validate_certs: false
    definition: "{{ lookup('template', 'klusterlet-addon-config.yaml.j2') | from_yaml }}"
    state: "{{ state }}"
  loop: "{{ acm_hive_clusters }}"

- name: Cluster Deployment - "{{ info_state }}"
  ansible.builtin.include_tasks:
    file: cluster_deployment.yml
  loop: "{{ acm_hive_clusters }}"

- name: Wait for clusters creation flow to complete
  when: state == "present"
  block:
    - name: Wait for cluster provisioning to complete
      kubernetes.core.k8s_info:
        host: "{{ cluster_api }}"
        api_key: "{{ cluster_api_token }}"
        validate_certs: false
        api_version: hive.openshift.io/v1
        kind: ClusterDeployment
        name: "{{ item.name }}"
        namespace: "{{ item.name }}"
        wait: true
        wait_timeout: 3600
        wait_condition:
          type: Provisioned
          status: true
      loop: "{{ acm_hive_clusters }}"

    - name: Wait for cluster to become ready
      kubernetes.core.k8s_info:
        host: "{{ cluster_api }}"
        api_key: "{{ cluster_api_token }}"
        validate_certs: false
        api_version: hive.openshift.io/v1
        kind: ClusterDeployment
        name: "{{ item.name }}"
        namespace: "{{ item.name }}"
        wait: true
        wait_timeout: 3600
        wait_condition:
          type: Ready
          status: true
      loop: "{{ acm_hive_clusters }}"

- name: Wait for clusters removal flow to complete
  when: state == "absent"
  block:
    - name: Wait for ClusterDeployment removal
      kubernetes.core.k8s_info:
        host: "{{ cluster_api }}"
        api_key: "{{ cluster_api_token }}"
        validate_certs: false
        api_version: hive.openshift.io/v1
        kind: ClusterDeployment
        name: "{{ item.name }}"
        namespace: "{{ item.name }}"
      loop: "{{ acm_hive_clusters }}"
      register: cl_remove
      until: cl_remove.resources | length == 0
      retries: 50
      delay: 15

    - name: Wait for ManagedCluster removal
      kubernetes.core.k8s_info:
        host: "{{ cluster_api }}"
        api_key: "{{ cluster_api_token }}"
        validate_certs: false
        api_version: cluster.open-cluster-management.io/v1
        kind: ManagedCluster
        name: "{{ item.name }}"
        namespace: "{{ item.name }}"
      loop: "{{ acm_hive_clusters }}"
      register: mc_remove
      until: mc_remove.resources | length == 0
      retries: 50
      delay: 15

- name: Print execution state
  vars:
    msg: |
      {{ info_state }} of Managed Clusters completed
  ansible.builtin.debug:
    msg: "{{ msg.split('\n') }}"
